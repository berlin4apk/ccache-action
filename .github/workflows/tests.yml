name: Tests

on:
  push:
    branches:
      - main
      - ci-testing
      - DevTest*
  pull_request:
    branches:
      - main
      - ci-testing
      - DevTest*      
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

defaults:
  run:
    shell: bash

env:
  CCACHE_ACTION_CI: true

jobs:
  build:
    # Run npm build and check that the dist/ folder is up to date.
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '16.x'
          cache: 'npm'
      - name: npm ci
        run: |
          npm ci
      - name: npm run build
        run: |
          npm run build
      - name: npm run test
        run: |
          npm run test --if-present
# https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts
      - name: 'Tar dist/ files'
        run: tar -cvf my_dist_files.tar dist
      - name: Archive dist production artifacts / dist-without-markdown-build
        uses: actions/upload-artifact@v3
        with:
          name: dist-without-markdown
          path: |
            my_dist_files.tar
            #dist
            #!dist/**/*.md
          # retention-days: 5
#      - name: git diff
#        if: ${{ github.actor != 'dependabot[bot]' }}
#        run: |
#          git diff --exit-code

  build-git-diff:
    # Run npm build and check that the dist/ folder is up to date.
    if: ${{ github.actor == 'DISABELD-NULLdependabot[bot]' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '16.x'
          cache: 'npm'
      - name: npm ci
        run: |
          npm ci
      - name: npm run build
        run: |
          npm run build
      - name: npm run test
        run: |
          npm run test --if-present
# https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts
      - name: Archive dist production artifacts / dist-without-markdown-build-git-diff
        uses: actions/upload-artifact@v3
        with:
          name: dist-without-markdown-build-git-diff
          path: |
            dist
            !dist/**/*.md
          # retention-days: 5
      - name: git diff
        if: ${{ github.actor != 'dependabot[bot]' }}
        run: |
          git diff --exit-code

  build-npm-install:
    # Run npm build and check that the dist/ folder is up to date.
    runs-on: ubuntu-latest
    #if: ${{ github.actor != 'dependabot[bot]' }}
    if: ${{ github.actor == 'DISABELD-NULLdependabot[bot]' }}
    steps:
      - uses: actions/checkout@v3
      - name: Build npm install
        run: |
          npm install
      - name: Archive dist production artifacts / build-npm-install
        uses: actions/upload-artifact@v3
        with:
          name: dist-without-markdown-build-npm-install
          path: |
            dist
            !dist/**/*.md
          # retention-days: 5
      - name: git diff
        run: |
          git diff --exit-code


  dependabot-build:
    # Run npm build and check that the dist/ folder is up to date.
    runs-on: ubuntu-latest
    if: ${{ github.actor == 'dependabot[bot]' }}
    steps:
      - uses: actions/checkout@v3
      - name: npm ci
        run: |
          #npm install
          npm ci
      - name: Build --if-present
        run: |
          npm run build --if-present
          #git diff --exit-code
      - name: test --if-present
        run: |
          npm run test --if-present
      - name: Archive dist production artifacts / dependabot-build
        uses: actions/upload-artifact@v3
        with:
          name: dist-without-markdown-dependabot-build
          path: |
            dist
            !dist/**/*.md
          # retention-days: 5


  test_ccache:
    # Test that ccache/sccache are installed and configured correctly.
    needs: [build]
    strategy:
      fail-fast: false
      matrix:
#        os: [ubuntu-latest, macos-latest, windows-latest]
        os: [ubuntu-22.04, ubuntu-20.04, macos-12, macos-11, windows-2022, windows-2019]
        shell: [bash]
        variant: [sccache, ccache]
        install-from-github: ['false', 'true']
        include:
          - { os: windows-latest, shell: powershell, variant: sccache, install-from-github: true }
          - { os: windows-latest, shell: powershell, variant: ccache, install-from-github: true, xfail: true }
          - { os: windows-latest, shell: powershell, variant: sccache, install-from-github: false }
          - { os: windows-latest, shell: powershell, variant: ccache, install-from-github: false, xfail: true }
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Clean dist dir
        run: rm -vfr dist
      - name: Download dist-without-markdown form dependabot-build / build
        uses: actions/download-artifact@v3
        with:
          name: dist-without-markdown
      - name: 'un-Tar dist/ files'
        run: tar -xvf my_dist_files.tar
      - name: Run ccache-action
        id: ccache
        uses: ./
        with:
          verbose: 2
          variant: ${{ matrix.variant }}
          install-from-github: ${{ matrix.install-from-github }}
          max-size: 10M
          key: parent
      - name: Test ccache 1/2
        run: |
          [[ ${{ steps.ccache.outputs.test-cache-hit }} = true ]] || [[ ${{ steps.ccache.outputs.test-cache-hit }} = false ]]
          if [ ${{ matrix.variant }} = sccache ]; then
            which sccache
            sccache -V
            sccache -s
            # sccache -s | grep -E 'Max cache size.+10 MiB'
            sccache -s | grep -E 'Cache location.+ccache-action/\.sccache'
          else
            which ccache
            ccache -V
            # Some versions of ccache don't have -v or -s
            ccache -sv || ccache -s || true
          fi
          # Example program
          echo "int x = $RANDOM;" > test.c
          ${{ matrix.variant }} gcc test.c -c -o test.o
      - name: Re-compile test program in Bash
        run: ${{ matrix.variant }} gcc test.c -c -o test.o
      - name: Re-compile test program in Bash
        run: ${{ matrix.variant }} gcc test.c -c -o test.o
        if: ${{ matrix.shell == 'bash' }}
      - name: Re-compile test program in PowerShell
        run: |
          ${{ matrix.variant }} gcc test.c -c -o test.o
        shell: powershell
        if: ${{ matrix.shell == 'powershell' }}
      - name: Test ccache 2/2
        run: |
          ${{ matrix.variant }} -sv || ${{ matrix.variant }} -s || true
          ${{ matrix.variant }} -s | grep -E '(Hits:.+2.+/.+3)|cache hit.+2$|Cache hits.+2$'
        if: ${{ !matrix.xfail }}

  test_cache_hit:
    # Test that loading from the cache works.
    needs: [test_ccache]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        shell: [bash]
        variant: [sccache, ccache]
        install-from-github: ['false', 'true']
        include:
#          - { os: windows-latest, shell: powershell, variant: sccache }
#          - { os: windows-latest, shell: powershell, variant: ccache }
          - { os: windows-latest, shell: powershell, variant: sccache, install-from-github: true }
          - { os: windows-latest, shell: powershell, variant: ccache, install-from-github: true }
          - { os: windows-latest, shell: powershell, variant: sccache, install-from-github: false }
          - { os: windows-latest, shell: powershell, variant: ccache, install-from-github: false }
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Run ccache action
        uses: ./
        id: output
        with:
          variant: ${{ matrix.variant }}
          install-from-github: ${{ matrix.install-from-github }}
          key: parent
      - name: Test output true
        run: |
          [[ ${{ steps.output.outputs.test-cache-hit }} = true ]]

  test_cache_miss:
    # Test that cache misses do not break anything.
    needs: [test_ccache]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        shell: [bash]
        variant: [sccache, ccache]
        install-from-github: ['false', 'true']
        include:
#          - { os: windows-latest, shell: powershell, variant: sccache }
#          - { os: windows-latest, shell: powershell, variant: ccache }
          - { os: windows-latest, shell: powershell, variant: sccache, install-from-github: true }
          - { os: windows-latest, shell: powershell, variant: ccache, install-from-github: true }
          - { os: windows-latest, shell: powershell, variant: sccache, install-from-github: false }
          - { os: windows-latest, shell: powershell, variant: ccache, install-from-github: false }
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - run: |
          echo "RAND=$RANDOM" >> "$GITHUB_ENV"
      - name: Clean dist dir
        run: rm -vfr dist
      - name: Download dist-without-markdown form dependabot-build / build
        uses: actions/download-artifact@v3
        with:
          name: dist-without-markdown
      - name: 'un-Tar dist/ files'
        run: tar -xvf my_dist_files.tar
      - name: Run ccache action
        uses: ./
        id: output
        with:
          variant: ${{ matrix.variant }}
          install-from-github: ${{ matrix.install-from-github }}
          key: random-key-${{ env.RAND }}
      - name: Test output false
        run: |
          [[ ${{ steps.output.outputs.test-cache-hit }} = false ]]

  test_restore_keys:
    # Test the "restore-keys" option.
    needs: [test_ccache]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        shell: [bash]
        variant: [sccache, ccache]
        install-from-github: ['false', 'true']
        include:
#          - { os: windows-latest, shell: powershell, variant: sccache }
#          - { os: windows-latest, shell: powershell, variant: ccache }
          - { os: windows-latest, shell: powershell, variant: sccache, install-from-github: true }
          - { os: windows-latest, shell: powershell, variant: ccache, install-from-github: true }
          - { os: windows-latest, shell: powershell, variant: sccache, install-from-github: false }
          - { os: windows-latest, shell: powershell, variant: ccache, install-from-github: false }
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - run: |
          echo "RAND=$RANDOM" >> "$GITHUB_ENV"
      - name: Clean dist dir
        run: rm -vfr dist
      - name: Download dist-without-markdown form dependabot-build / build
        uses: actions/download-artifact@v3
        with:
          name: dist-without-markdown
      - name: 'un-Tar dist/ files'
        run: tar -xvf my_dist_files.tar
      - name: Run ccache action
        uses: ./
        id: restore-keys
        with:
          variant: ${{ matrix.variant }}
          install-from-github: ${{ matrix.install-from-github }}
          key: child-${{ env.RAND }}
          restore-keys: |
            parent
      - name: Test restore-keys
        run: |
          [[ ${{ steps.restore-keys.outputs.test-cache-hit }} = true ]]

  test_docker:
    # Test that it works in a Docker container without sudo.
    runs-on: ubuntu-latest
    needs: [build]
    container: ubuntu:latest
    steps:
      - uses: actions/checkout@v3
      - name: Clean dist dir
        run: rm -vfr dist
      - name: Download dist-without-markdown form dependabot-build / build
        uses: actions/download-artifact@v3
        with:
          name: dist-without-markdown
      - name: 'un-Tar dist/ files'
        run: tar -xvf my_dist_files.tar
      - run: apt update
        shell: bash
      - name: Run ccache-action
        uses: ./

  test_option_save:
    # Test that the 'save' option is available.
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      matrix:
        save: [true, false]
    steps:
      - uses: actions/checkout@v3
      - name: Clean dist dir
        run: rm -vfr dist
      - name: Download dist-without-markdown form dependabot-build / build
        uses: actions/download-artifact@v3
        with:
          name: dist-without-markdown
      - name: 'un-Tar dist/ files'
        run: tar -xvf my_dist_files.tar
      - name: Run ccache-action
        uses: ./
        with:
          save: ${{ matrix.save }}

  test_option_append_timestamp:
    # Test that the 'append-timestamp' option is available.
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      matrix:
        append-timestamp: [true, false]
    steps:
      - uses: actions/checkout@v3
      - name: Clean dist dir
        run: rm -vfr dist
      - name: Download dist-without-markdown form dependabot-build / build
        uses: actions/download-artifact@v3
        with:
          name: dist-without-markdown
      - name: 'un-Tar dist/ files'
        run: tar -xvf my_dist_files.tar
      - name: Run ccache-action
        uses: ./
        with:
          append-timestamp: ${{ matrix.append-timestamp }}
